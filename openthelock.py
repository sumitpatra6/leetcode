from collections import deque
starting_position = '0000'
# deadends = ["8430","5911","4486","7174","9772","0731","9550","3449","4437","3837","1870","5798","9583","9512","5686","5131","0736","3051","2141","2989","6368","2004","1012","8736","0363","3589","8568","6457","3467","1967","1055","6637","1951","0575","4603","2606","0710","4169","7009","6554","6128","2876","8151","4423","0727","8130","3571","4801","8968","6084","3156","3087","0594","9811","3902","4690","6468","2743","8560","9064","4231","6056","2551","8556","2541","5460","5657","1151","5123","3521","2200","9333","9685","4871","9138","5807","2191","2601","1792","3470","9096","0185","0367","6862","1757","6904","4485","7973","7201","2571","3829","0868","4632","6975","2026","3463","2341","4647","3680","3282","3761","4410","3397","3357","4038","6505","1655","3812","3558","4759","1112","8836","5348","9113","1627","3249","0537","4227","7952","8855","3592","2054","3175","6665","4088","9959","3809","7379","6949","8063","3686","8078","0925","5167","2075","4665","2628","8242","9831","1397","5547","9449","6512","6083","9682","2215","3236","2457","6211","5536","8674","2647","9752","5433","0186","5904","1526","5347","1387","3153","1353","6069","9995","9496","0003","3400","1692","6870","4445","3063","0708","3278","6961","3063","0249","0375","1763","1804","4695","6493","7573","9977","1108","0856","5631","4799","4164","0844","2600","1785","1587","4510","9012","7497","4923","2560","0338","3839","5624","1980","1514","4634","2855","7012","3626","7032","6145","5663","4395","0724","4711","1573","6904","8100","2649","3890","8110","8067","1460","0186","6098","2459","6991","9372","8539","8418","7944","0499","9276","1525","1281","8738","5054","7869","6599","8018","7530","2327","3681","5248","4291","7300","8854","2591","8744","3052","6369","3669","8501","8455","5726","1211","8793","6889","9315","0738","6805","5980","7485","2333","0140","4708","9558","9026","4349","5978","4989","5238","3217","5938","9660","5858","2118","7657","5896","3195","8997","1688","2863","9356","4208","5438","2642","4138","7466","6154","0926","2556","9574","4497","9633","0585","1390","5093","3047","0430","7482","0750","6229","8714","4765","0941","1780","6262","0925","5631","9167","0885","7713","5576","3775","9652","0733","7467","5301","9365","7978","4736","3309","6965","4703","5897","8460","9619","0572","6297","7701","7554","8669","5426","6474","5540","5038","3880","1657","7574","1108","4369","7782","9742","5301","6984","3158","2869","0599","2147","6962","9722","3597","9015","3115","9051","8269","6967","5392","4401","6579","8997","8933","9297","0151","8820","3297","6723","1755","1163","8896","7122","4859","5504","0857","4682","8177","8702","9167","9410","0130","2789","7492","5938","3012","4137","3414","2245","4292","6945","5446","6614","2977","8640","9242","7603","8349","9420","0538","4222","0599","8459","8738","4764","6717","7575","5965","9816","9975","4994","2612","0344","6450","9088","4898","6379","4127","1574","9044","0434","5928","6679","1753","8940","7563","0545","4575","6407","6213","8327","3978","9187","2996","1956","8819","9591","7802","4747","9094","0179","0806","2509","4026","4850","2495","3945","4994","5971","3401","0218","6584","7688","6138","7047","9456","0173","1406","1564","3055","8725","4835","4737","6279","5291","0145","0002","1263","9518","1251","8224","6779","4113","8680","2946","1685","2057","9520","4099","7785","1134","2152","4719","6038","1599","6750","9273","7755","3134","2345","8208","5750","5850","2019","0350","9013","6911","6095","6843","3157","9049","0801","2739","9691","3511"]
# target = "2248"
# deadends = ['8888']
# target = '0009'
deadends = ["6586","6557","0399","3436","1106","4255","1161","7546","2375","5535","7623","0805","7045","8244","1804","1777","5152","7241","4488","3653","7485","9103","2726","4624","8654","1404","9321","5145","4237","5423","9350","3383","8658","2601","2446","1605","6804","1521","0832","5555","6710","3851","6370","0069","7369","6352","4165","4327","9727","1363","9906","9463","8628","5239","0009","2743","0419","4722","7251","5645","5159","4040","1406","5836","0623","9851","2970","0479","1707","5248","0135","8840","9395","1068","9653","4461","6830","7851","7798","3745","1608","2061","5404","3536","3875","3552","8430","0846","5575","2835","1777","5848","5181","8129","2408","3257","9168","3279","4705","9799","1592","7849","4934","1210","0384","3946","5200","3702","4792","1363","0340","4623","9837","0798","2400","0859","3002","1819","2925","8966","7065","3310","1415","9986","7612","1233","9681","6869","5324","4271","1632","2947","8829","9102","9502","4896","2556","4998","7642","8477","4439","8391","7171","2081","5401","0369","4498","1269","2535","7805","6611","1605","1432","6237","5565","9618","2123","5178","3649","8657","6236","6737","1561","1802","1349","9738","6245","7202","8442","7183","5105","7963","0259","5622","3098","0664","7366","1556","5711","9981","4607","2063","7540","1818","7320","8505","1028","6127","1816","8961","7126","4739","4050","7729","5887","4836","1244","2697","3937","9817","2759","9536","0154","7214","5688","1284","5434","7103","2704","6790","3244","8797","3860","1988","1458","4268","1901","4787","7599","6672","3579","3726","6670","1603","3332","7249","0984","6783","4456","0023","2678","0167","8626","6080","5716","5083","6135","8700","7890","8683","2089","0264","2123","0787","3056","2647","4645","8748","6936","6899","0031","4934","0221","9481","9959","1386","7695","2034","0466","0809","9166","6381","6937","0744","8059","8498","5772","8379","4448","5794","7423","2568","4671","6408","4335","1655","3662","1250","5262","7197","6831","8004","0575","8784","2920","0869","7157","0153","7255","1541","1247","5498","0566","6632","7640","1733","2546","5110","2852","8042","8175","0284","8589","8918","5755","2289","0812","4850","4650","9018","6649","5099","6532","9891","8675","1718","5442","6786","8915","3710","3833","2659","7040","3959","2505","7574","1199","3465","4557","7230","9161","5177","7815","4564","1470","8051","6287","2504","4025","8911","6158","6857","8948","7991","3670","3413","0423","7184","7921","1351","8908","1921","1685","5579","4641","0286","6410","2800","7018","1402","7410","3471","1312","9530","4581","5364","4820","8192","3088","4714","2255","2342","5042","8673","9788","2203","0879","2345","9712","2008","0652","0939","0720","2954","4482","2390","0807","4634","6266","5222","6898","7491","0294","1811","0667","8282","5754","1841","9518","9093","7904","4902","0068","5157","7823","8073","8801","8179","1402","9977","2332","9448","2251","8455","6157","1878","4183","3331","8047","1254","9639","2156","5780","7359","0260","9683","6842","1098","6495","2057","6583","0932","2577","1818","6042","8358","1833","5512","4529","0583","9955","9205","6055","3322","2232","5372","5835","2202","9696","1596","3424","3696","5695","1365","6432","0327","1565","8509","6936","3363","3007","3107","0410","6258","2492","0300","1255","1664","8666","6826","9961","5782","0140","5567","9596","1680","1892","5016","8804","4962","9318","4540","5044","0979","2004","4265","7689","0289","3434","6090","1375","3135","3935","5140","9255","3997","3482","8150","8164","0787"]
target = "8828"
def openLock(deadends, target):
    visited = []
    if target == '0000':
        return 0
    for d in deadends:
        visited.append(d)
    if target in visited:
        return -1
    q = deque()
    q.append("0000")
    steps = 0
    while len(q) > 0:
        size = len(q)
        for i in range(size):
            current_node = q.popleft()
            # print(current_node)
            if current_node in visited:
                continue
            visited.append(current_node)
            if current_node == target:
                return steps
            for i in range(4):
                # substract
                arr = list(current_node)
                # arr[i] =  '9' if int(arr[i]) - 1 < 0 else str(int(arr[i]) - 1)
                arr[i] = str((int(arr[i]) + 11) % 10)
                new_str = ''.join(arr)
                if new_str == target:
                    return steps + 1
                if new_str not in visited or new_str:
                    q.append(new_str)
                # addition
                arr = list(current_node)
                arr[i] =  arr[i] = str((int(arr[i]) + 9) % 10)
                new_str = ''.join(arr)
                if new_str == target:
                    return steps + 1
                if new_str not in visited or new_str:
                    q.append(new_str)
                
        steps += 1 
    return -1
import time
start = time.time()
print(openLock(deadends, target))
print(time.time() - start)
    